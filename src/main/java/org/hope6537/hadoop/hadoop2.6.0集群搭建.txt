集群规划：
	主机名		IP		安装的软件			运行的进程
	hadoop1		192.168.8.131	jdk、hadoop			NameNode、DFSZKFailoverController(zkfc)
	hadoop2		192.168.8.132	jdk、hadoop			NameNode、DFSZKFailoverController(zkfc)
	hadoop3		192.168.8.133	jdk、hadoop			ResourceManager
	hadoop4		192.168.8.134	jdk、hadoop			ResourceManager
	hadoop5		192.168.8.135	jdk、hadoop、zookeeper		DataNode、NodeManager、JournalNode、QuorumPeerMain
	hadoop6		192.168.8.136	jdk、hadoop、zookeeper		DataNode、NodeManager、JournalNode、QuorumPeerMain
	hadoop7		192.168.8.137	jdk、hadoop、zookeeper		DataNode、NodeManager、JournalNode、QuorumPeerMain
	
说明：
	1.在hadoop2.0中通常由两个NameNode组成，一个处于active状态，另一个处于standby状态。
	Active NameNode对外提供服务，而Standby NameNode则不对外提供服务，仅同步active namenode的状态，以便能够在它失败时快速进行切换。
	hadoop2.0官方提供了两种HDFS HA的解决方案，一种是NFS，另一种是QJM。
	这里我们使用简单的QJM。在该方案中，主备NameNode之间通过一组JournalNode同步元数据信息，一条数据只要成功写入多数JournalNode即认为写入成功。通常配置奇数个JournalNode
	这里还配置了一个zookeeper集群，用于ZKFC（DFSZKFailoverController）故障转移，当Active NameNode挂掉了，会自动切换Standby NameNode为standby状态
	2.hadoop-2.2.0中依然存在一个问题，就是ResourceManager只有一个，存在单点故障。
	hadoop-2.6.0解决了这个问题，有两个ResourceManager，一个是Active，一个是Standby，状态由zookeeper进行协调
安装步骤：
	1.安装配置zooekeeper集群（在所有5、6、7上）
		1.1解压
			tar -zxvf zookeeper-3.4.5.tar.gz -C /home/hope6537/hadoop
		1.2修改配置
			cd /home/hope6537/hadoop/zookeeper-3.4.5/conf/
			cp zoo_sample.cfg zoo.cfg
			nano zoo.cfg
			修改：dataDir=/home/hope6537/hadoop/zookeeper-3.4.5/tmp
			在最后添加：
			server.1=hadoop5:2888:3888
			server.2=hadoop6:2888:3888
			server.3=hadoop7:2888:3888
			保存退出
			然后创建一个tmp文件夹
			mkdir /home/hope6537/hadoop/zookeeper-3.4.5/tmp
			再创建一个空文件
			touch /home/hope6537/hadoop/zookeeper-3.4.5/tmp/myid
			最后向该文件写入ID
			echo 1 > /home/hope6537/hadoop/zookeeper-3.4.5/tmp/myid
		1.3将配置好的zookeeper拷贝到其他节点(首先分别在hadoop6、hadoop7根目录下创建一个itcast目录：mkdir /itcast)
			scp -r /home/hope6537/hadoop/zookeeper-3.4.5/ hadoop6:/home/hope6537/hadoop/
			scp -/home/hope6537/hadoop/zookeeper-3.4.5/ hadoop7:/home/hope6537/hadoop/
			
			注意：修改6和7上的/tmp/myid内容
			
	
	2.安装配置hadoop集群（在1号机上操作）
		2.1解压
			tar -zxvf hadoop-2.6.0.tar.gz -C /home/hope6537/hadoop
		2.2配置HDFS（hadoop2.0所有的配置文件都在$HADOOP_HOME/etc/hadoop目录下）
			#将hadoop添加到环境变量中
			vim /etc/profile
			export JAVA_HOME=/home/hope6537/hadoop/jdk/jdk1.8
			export HADOOP_HOME=/home/hope6537/hadoop/hadoop-2.6.0
			export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin
			
			#hadoop2.0的配置文件全部在$HADOOP_HOME/etc/hadoop下
			cd $HADOOP_HOME/etc/hadoop
			
			2.2.1修改hadoo-env.sh
				export JAVA_HOME=/home/hope6537/hadoop/jdk/jdk1.8
				
			2.2.2修改core-site.xml
				<configuration>
					<!-- 指定hdfs的nameservice为ns1 -->
					<property>
						<name>fs.defaultFS</name>
						<value>hdfs://ns1</value>
					</property>
					<!-- 指定hadoop临时目录 -->
					<property>
						<name>hadoop.tmp.dir</name>
						<value>/home/hope6537/hadoop/hadoop-2.6.0/tmp</value>
					</property>
					<!-- 指定zookeeper地址 -->
					<property>
						<name>ha.zookeeper.quorum</name>
						<value>hadoop5:2181,hadoop6:2181,hadoop7:2181</value>
					</property>
				</configuration>
				
			2.2.3修改hdfs-site.xml
				<configuration>
					<!--指定hdfs的nameservice为ns1，需要和core-site.xml中的保持一致 -->
					<property>
						<name>dfs.nameservices</name>
						<value>ns1</value>
					</property>
					<!-- ns1下面有两个NameNode，分别是nn1，nn2 -->
					<property>
						<name>dfs.ha.namenodes.ns1</name>
						<value>nn1,nn2</value>
					</property>
					<!-- nn1的RPC通信地址 -->
					<property>
						<name>dfs.namenode.rpc-address.ns1.nn1</name>
						<value>hadoop1:9000</value>
					</property>
					<!-- nn1的http通信地址 -->
					<property>
						<name>dfs.namenode.http-address.ns1.nn1</name>
						<value>hadoop1:50070</value>
					</property>
					<!-- nn2的RPC通信地址 -->
					<property>
						<name>dfs.namenode.rpc-address.ns1.nn2</name>
						<value>hadoop2:9000</value>
					</property>
					<!-- nn2的http通信地址 -->
					<property>
						<name>dfs.namenode.http-address.ns1.nn2</name>
						<value>hadoop2:50070</value>
					</property>
					<!-- 指定NameNode的元数据在JournalNode上的存放位置 -->
					<property>
						<name>dfs.namenode.shared.edits.dir</name>
						<value>qjournal://hadoop5:8485;hadoop6:8485;hadoop7:8485/ns1</value>
					</property>
					<!-- 指定JournalNode在本地磁盘存放数据的位置 -->
					<property>
						<name>dfs.journalnode.edits.dir</name>
						<value>/home/hope6537/hadoop/hadoop-2.6.0/journal</value>
					</property>
					<!-- 开启NameNode失败自动切换 -->
					<property>
						<name>dfs.ha.automatic-failover.enabled</name>
						<value>true</value>
					</property>
					<!-- 配置失败自动切换实现方式 -->
					<property>
						<name>dfs.client.failover.proxy.provider.ns1</name>
						<value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
					</property>
					<!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行-->
					<property>
						<name>dfs.ha.fencing.methods</name>
						<value>
							sshfence
							shell(/bin/true)
						</value>
					</property>
					<!-- 使用sshfence隔离机制时需要ssh免登陆 -->
					<property>
						<name>dfs.ha.fencing.ssh.private-key-files</name>
						<value>/home/hope6537/.ssh/id_rsa</value>
					</property>
					<!-- 配置sshfence隔离机制超时时间 -->
					<property>
						<name>dfs.ha.fencing.ssh.connect-timeout</name>
						<value>30000</value>
					</property>
				</configuration>
			
			2.2.4修改mapred-site.xml
				<configuration>
					<!-- 指定mr框架为yarn方式 -->
					<property>
						<name>mapreduce.framework.name</name>
						<value>yarn</value>
					</property>
				</configuration>	
			
			2.2.5修改yarn-site.xml
				<configuration>
						<!-- 开启RM高可靠 -->
						<property>
						   <name>yarn.resourcemanager.ha.enabled</name>
						   <value>true</value>
						</property>
						<!-- 指定RM的cluster id -->
						<property>
						   <name>yarn.resourcemanager.cluster-id</name>
						   <value>yrc</value>
						</property>
						<!-- 指定RM的名字 -->
						<property>
						   <name>yarn.resourcemanager.ha.rm-ids</name>
						   <value>rm1,rm2</value>
						</property>
						<!-- 分别指定RM的地址 -->
						<property>
						   <name>yarn.resourcemanager.hostname.rm1</name>
						   <value>hadoop3</value>
						</property>
						<property>
						   <name>yarn.resourcemanager.hostname.rm2</name>
						   <value>hadoop4</value>
						</property>
						<!-- 指定zk集群地址 -->
						<property>
						   <name>yarn.resourcemanager.zk-address</name>
						   <value>hadoop5:2181,hadoop6:2181,hadoop7:2181</value>
						</property>
						<property>
						   <name>yarn.nodemanager.aux-services</name>
						   <value>mapreduce_shuffle</value>
						</property>
				</configuration>
			
				
			2.2.6修改slaves(slaves是指定子节点的位置，因为要在hadoop1上启动HDFS、在hadoop3启动yarn，所以hadoop1上的slaves文件指定的是datanode的位置，hadoop3上的slaves文件指定的是nodemanager的位置)
				hadoop5
				hadoop6
				hadoop7

			2.2.7配置免密码登陆
				在每台机器上运行
				ssh-keygen -t rsa
				生成密钥
				然后把所有的公钥全都写到authorized_key文件下
				然后给所有的节点分发
						
		
		2.4将配置好的hadoop拷贝到其他节点
			scp -r  $HADOOP_HOME/ hope6537@hadoop[x]:$HADOOP_HOME
			
		###注意：严格按照下面的步骤
		2.5启动zookeeper集群（分别在hadoop5、hadoop6、hadoop7上启动zk）
			./zkServer.sh start
			#查看状态：一个leader，两个follower
			./zkServer.sh status
		2.6启动journalnode（分别在在hadoop5、hadoop6、hadoop7上执行）
			sbin/hadoop-daemon.sh start journalnode
			#运行jps命令检验，5 6 7上多了JournalNode进程
		2.7格式化HDFS
			#在hadoop1上执行命令:
			hdfs namenode -format
			#格式化后会在根据core-site.xml中的hadoop.tmp.dir配置生成个文件，
			#这里我配置的$HADOOP_HOME/tmp，然后将tmp拷贝到hadoop2的$HADOOP_HOME下。
		2.8格式化ZK(在hadoop1上执行即可)
			hdfs zkfc -formatZK
		2.9启动HDFS(在hadoop1上执行)
			sbin/start-dfs.sh
		2.10启动YARN
		(#####注意#####：
			是在hadoop3上执行start-yarn.sh，把namenode和resourcemanager分开是因为性能问题，
			因为他们都要占用大量资源，所以把他们分开了，他们分开了就要分别在不同的机器上启动)
			sbin/start-yarn.sh

		
	到此，hadoop-2.4.1配置完毕，可以统计浏览器访问:
		http://192.168.8.131:50070
		NameNode 'hadoop1:9000' (active)
		http://192.168.8.132:50070
		NameNode 'hadoop2:9000' (standby)
	
	验证HDFS HA
		首先向hdfs上传一个文件
		hadoop fs -put /etc/profile /profile
		hadoop fs -ls /
		然后再kill掉active的NameNode
		kill -9 <pid of NN>
		通过浏览器访问：http://192.168.8.132:50070
		NameNode 'hadoop2:9000' (active)
		这个时候hadoop2上的NameNode变成了active
		在执行命令：
		hadoop fs -ls /
		-rw-r--r--   3 root supergroup       1926 2014-02-06 15:36 /profile
		刚才上传的文件依然存在！！！
		手动启动那个挂掉的NameNode
		sbin/hadoop-daemon.sh start namenode
		通过浏览器访问：http://192.168.8.131:50070
		NameNode 'hadoop1:9000' (standby)
	
	验证YARN：
		运行一下hadoop提供的demo中的WordCount程序：
		hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0.jar wordcount /profile /out
	
	OK，大功告成！！！


 